- 페이지 로딩 시 transition 변경
맨 처음 로딩 시 transition은 none이고 다음 이벤트 부턴
설정된 transition이 와야하는데 
document.body.classList.remove("preload");을 통해 transition을 제거하면
설정된 방식의 transition이 작동함 === 위치 이동 문제가 발생

이를 해결하기 위해 setTimeOut과 requestAnimationFrame을 사용해서 해결

- requestAnimationFrame VS setTimeOut
setTimeout
특징:

지정된 시간(ms) 이후에 콜백 함수를 실행합니다.
정확한 시간을 지정하여 작업을 수행할 수 있습니다.
비교적 단순한 사용법과 예측 가능한 동작을 제공합니다.
장점:

정확한 시간(ms) 이후에 작업을 실행할 수 있어서 일정한 시간 간격으로 작업을 처리해야 할 때 유용합니다.
단순한 비동기 작업에 적합합니다.
단점:

브라우저의 다음 렌더링 프레임을 기다리지 않기 때문에, 애니메이션 등의 경우에는 부드럽게 처리되지 않을 수 있습니다.
딜레이를 설정하더라도 브라우저의 성능에 따라 정확한 시간에 작업이 실행되지 않을 수 있습니다.
requestAnimationFrame
특징:

브라우저의 다음 리플로우/리페인트 사이클에 콜백 함수를 실행합니다.
주로 애니메이션과 관련된 작업을 부드럽게 처리하는 데 사용됩니다.
브라우저의 최적화된 렌더링 주기에 맞춰 작업을 수행합니다.
장점:

부드러운 애니메이션과 같은 시각적 요소를 다룰 때 유용합니다.
브라우저의 성능을 최대한 활용하여 자연스러운 화면 갱신을 제공합니다.
단점:

특정 시간 이후에 작업을 실행하기 위해선 추가적인 로직이 필요합니다.
애니메이션이 아닌 비동기 작업을 처리하는 데는 적합하지 않을 수 있습니다.

선택 방법
애니메이션 처리: requestAnimationFrame을 사용하여 부드럽고 최적화된 애니메이션을 구현할 수 있습니다.
시간 기반 작업: setTimeout을 사용하여 정확한 시간(ms) 이후에 작업을 실행하거나, 반복적인 작업을 처리할 수 있습니다.
특정 상황: 필요에 따라 두 방법을 혼합하여 사용할 수도 있습니다. 예를 들어, 초기 로딩 시에는 setTimeout으로 일시적인 딜레이를 주고, 이후에는 requestAnimationFrame으로 애니메이션을 처리할 수 있습니다.
따라서 사용하고자 하는 작업의 특성과 요구 사항에 따라 setTimeout과 requestAnimationFrame을 적절히 선택하여 사용하는 것이 좋습니다.